---
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";
import type { MarkdownInstance } from "astro";
interface Props {
  posts: MarkdownInstance<Record<string, any>>[];
}

export const prerender = true;

export async function getStaticPaths() {
  const allPosts: MarkdownInstance<Record<string, any>>[] =
    await Astro.glob("../posts/*.md");

  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
  ];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts?.filter((post) =>
      post.frontmatter.tags.includes(tag)
    );

    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---

<BaseLayout pageTitle={`${tag}`}>
  <div class="flex-1 flex flex-col items-center justify-center gap-4">
    <p class="w-full flex items-center gap-2">
      Posts tagged with <span
        class="text-2xl font-bold text-first dark:text-second">{tag}</span>
    </p>
    <div class="h-full w-full flex flex-col items-center justify-center">
      {!posts && <p>Not posts found</p>}
    </div>
    <ul class="flex flex-wrap gap-4 items-center justify-center my-4">
      {
        posts.length > 0 &&
          posts.map((post) => (
            <BlogPost
              urlPost={post.url ?? "/blog"}
              title={post.frontmatter.title}
              author={post.frontmatter.author}
              date={post.frontmatter.pubDate}
              description={post.frontmatter.description}
              coverImage={post.frontmatter.image.url}
            />
          ))
      }
    </ul>
  </div>
</BaseLayout>
